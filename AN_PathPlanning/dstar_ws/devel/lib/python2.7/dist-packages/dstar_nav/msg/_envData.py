# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dstar_nav/envData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class envData(genpy.Message):
  _md5sum = "1e43a5c8c54c87cddb3fbc5f19377b83"
  _type = "dstar_nav/envData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool setMap
bool cliff
int16 x
int16 y
int16 z
float32 val
float32[] vectors
"""
  __slots__ = ['setMap','cliff','x','y','z','val','vectors']
  _slot_types = ['bool','bool','int16','int16','int16','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       setMap,cliff,x,y,z,val,vectors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(envData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.setMap is None:
        self.setMap = False
      if self.cliff is None:
        self.cliff = False
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.z is None:
        self.z = 0
      if self.val is None:
        self.val = 0.
      if self.vectors is None:
        self.vectors = []
    else:
      self.setMap = False
      self.cliff = False
      self.x = 0
      self.y = 0
      self.z = 0
      self.val = 0.
      self.vectors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B3hf().pack(_x.setMap, _x.cliff, _x.x, _x.y, _x.z, _x.val))
      length = len(self.vectors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.vectors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.setMap, _x.cliff, _x.x, _x.y, _x.z, _x.val,) = _get_struct_2B3hf().unpack(str[start:end])
      self.setMap = bool(self.setMap)
      self.cliff = bool(self.cliff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.vectors = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B3hf().pack(_x.setMap, _x.cliff, _x.x, _x.y, _x.z, _x.val))
      length = len(self.vectors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vectors.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.setMap, _x.cliff, _x.x, _x.y, _x.z, _x.val,) = _get_struct_2B3hf().unpack(str[start:end])
      self.setMap = bool(self.setMap)
      self.cliff = bool(self.cliff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.vectors = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3hf = None
def _get_struct_2B3hf():
    global _struct_2B3hf
    if _struct_2B3hf is None:
        _struct_2B3hf = struct.Struct("<2B3hf")
    return _struct_2B3hf
