// Generated by gencpp from file dstar_nav/robotData.msg
// DO NOT EDIT!


#ifndef DSTAR_NAV_MESSAGE_ROBOTDATA_H
#define DSTAR_NAV_MESSAGE_ROBOTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dstar_nav
{
template <class ContainerAllocator>
struct robotData_
{
  typedef robotData_<ContainerAllocator> Type;

  robotData_()
    : robPos()
    , goalPos()
    , robOrient()
    , proxVec()
    , sense3D()
    , proxDist(0.0)  {
    }
  robotData_(const ContainerAllocator& _alloc)
    : robPos(_alloc)
    , goalPos(_alloc)
    , robOrient(_alloc)
    , proxVec(_alloc)
    , sense3D(_alloc)
    , proxDist(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _robPos_type;
  _robPos_type robPos;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _goalPos_type;
  _goalPos_type goalPos;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _robOrient_type;
  _robOrient_type robOrient;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _proxVec_type;
  _proxVec_type proxVec;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sense3D_type;
  _sense3D_type sense3D;

   typedef float _proxDist_type;
  _proxDist_type proxDist;





  typedef boost::shared_ptr< ::dstar_nav::robotData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dstar_nav::robotData_<ContainerAllocator> const> ConstPtr;

}; // struct robotData_

typedef ::dstar_nav::robotData_<std::allocator<void> > robotData;

typedef boost::shared_ptr< ::dstar_nav::robotData > robotDataPtr;
typedef boost::shared_ptr< ::dstar_nav::robotData const> robotDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dstar_nav::robotData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dstar_nav::robotData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dstar_nav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dstar_nav': ['/home/austinnguyen517/Documents/Research/BML/MultiRobot/AN_PathPlanning/dstar_ws/src/dstar_nav/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dstar_nav::robotData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dstar_nav::robotData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dstar_nav::robotData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dstar_nav::robotData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dstar_nav::robotData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dstar_nav::robotData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dstar_nav::robotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e646730a5027be23477dd7883ffccb5d";
  }

  static const char* value(const ::dstar_nav::robotData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe646730a5027be23ULL;
  static const uint64_t static_value2 = 0x477dd7883ffccb5dULL;
};

template<class ContainerAllocator>
struct DataType< ::dstar_nav::robotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dstar_nav/robotData";
  }

  static const char* value(const ::dstar_nav::robotData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dstar_nav::robotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] robPos\n"
"float32[] goalPos\n"
"float32[] robOrient\n"
"float32[] proxVec\n"
"float32[] sense3D\n"
"float32 proxDist\n"
;
  }

  static const char* value(const ::dstar_nav::robotData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dstar_nav::robotData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robPos);
      stream.next(m.goalPos);
      stream.next(m.robOrient);
      stream.next(m.proxVec);
      stream.next(m.sense3D);
      stream.next(m.proxDist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robotData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dstar_nav::robotData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dstar_nav::robotData_<ContainerAllocator>& v)
  {
    s << indent << "robPos[]" << std::endl;
    for (size_t i = 0; i < v.robPos.size(); ++i)
    {
      s << indent << "  robPos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.robPos[i]);
    }
    s << indent << "goalPos[]" << std::endl;
    for (size_t i = 0; i < v.goalPos.size(); ++i)
    {
      s << indent << "  goalPos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.goalPos[i]);
    }
    s << indent << "robOrient[]" << std::endl;
    for (size_t i = 0; i < v.robOrient.size(); ++i)
    {
      s << indent << "  robOrient[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.robOrient[i]);
    }
    s << indent << "proxVec[]" << std::endl;
    for (size_t i = 0; i < v.proxVec.size(); ++i)
    {
      s << indent << "  proxVec[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.proxVec[i]);
    }
    s << indent << "sense3D[]" << std::endl;
    for (size_t i = 0; i < v.sense3D.size(); ++i)
    {
      s << indent << "  sense3D[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sense3D[i]);
    }
    s << indent << "proxDist: ";
    Printer<float>::stream(s, indent + "  ", v.proxDist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DSTAR_NAV_MESSAGE_ROBOTDATA_H
